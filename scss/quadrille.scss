/*
  Quadrille
  SCSS Configuration

  Change these values.
*/

$grid_size: 24px;
$grid_offset_x: 12px;
$grid_offset_y: 12px;


/*
  ADVANCED PERFORMANCE TUNING
  Make convenience classes for a viewport up to 5000px
  This will make the css huge if you have a really small grid size.
  If you aren't using such a ridiculous viewport size, cut this
  down to save size in the generated CSS file.
*/
$max_allowed_viewport_px: 5000;


/*
  Don't touch anything below this line.
  If you want to modify Quadrille styles, override them in your
  own stylesheet. Leave this alone.
*/
@mixin viewport-simulator {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  overflow: hidden;
}

@mixin offscreen {
  visibility: hidden;
  position: absolute;
  top: -8192px;
  left: -8192px;
}

/* basic viewport simulation */
#qdr-viewport {
  @include viewport-simulator;

  #qdr-backgroundsize {
    @include offscreen;
  }

  #qdr-fakebackground {
    @include viewport-simulator;
  }
}

/* JS is on */
.js-on {
  #qdr-viewport {
    background: none;
  }

  #qdr-grid {
    @include viewport-simulator;
    overflow: auto;

    #qdr-gridinternal {
      @include viewport-simulator;
      background-color: transparent;
      background-position: 0 0;
      background-attachment: scroll;
    }
  }
}

/* grid shortcuts */
.block {
  display: block;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

.gblock {
  @extend .block;
  float: left;
}

.relblock {
  @extend .block;
  position: relative;
  z-index: 10;
}

.absblock {
  @extend .block;
  position: absolute;
  z-index: 10;
}

.wrap {
  overflow: hidden;
}

.clearall {
  clear: both;
}

.clearleft {
  clear: left;
}

.clearright {
  clear: right;
}

$max: $max_allowed_viewport_px / $grid_size / (1/1px);
@for $i from 0 to round($max + 1) {
  .w#{$i} { width: ($grid_size * $i); }
  .h#{$i} { height: ($grid_size * $i); }
  .s#{$i} { margin-left: ($grid_size * $i) !important; }
  .x#{$i} { left: ($grid_size * $i); &.offset{  left: ($grid_size * $i + $grid_offset_x); } }
  .y#{$i} { top: ($grid_size * $i); &.offset{ top: ($grid_size * $i + $grid_offset_y); } }
  .lh#{$i} { line-height: ($grid_size * $i); }
  .fs#{$i} { font-size: ($grid_size * $i); }
}

